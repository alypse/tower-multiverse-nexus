/**
 * @constant STANDARD_PERK_CHANCE - Chance to pick a Standard Perk for a slot if there are still options left in all 3 categories.
 */
export declare const STANDARD_PERK_CHANCE = 65;
/**
 * @constant ULTIMATE_PERK_CHANCE - Chance to pick a Ultimate Perk for a slot if there are still options left in all 3 categories
 */
export declare const ULTIMATE_PERK_CHANCE = 20;
/**
 * @constant TRADEOFF_PERK_CHANCE - Chance to pick a Tradeoff Perk for a slot if there are still options left in all 3 categories.
 */
export declare const TRADEOFF_PERK_CHANCE = 15;
/**
 * @enum - PerkCategories - Enum containing the categories of perks
 */
export declare enum PerkCategories {
    STANDARD = "STANDARD",
    ULTIMATE = "ULTIMATE",
    TRADEOFF = "TRADEOFF"
}
export type ValueFormula = ({ count, standardPerkLabLevel, tradeoffPerkLabLevel, }: {
    count: number;
    standardPerkLabLevel: number;
    tradeoffPerkLabLevel: number;
}) => number;
/**
 * @type Perk - The format of a Perk
 *
 * ```ts
 * {
 *   category: PerkCategories; // enum containing STANDARD, ULTIMATE, TRADEOFF
 *   maxLevel: number; // how many times you can pick the perk
 *   getValue: ({ count, standardPerkLabLevel, tradeoffPerkLabLevel }) => number; // given perk count and lab levels, return the value of the perk
 *   getDebuff: () => value // return the debuff value of the perk (for tradeoffs, everything else returns 0). Implemented as a function in case we get future labs.
 *   formatValue: (value: number, debuff: number) => string; // convert the values from getValue and getDebuff into the English text shown in game
 * }
 * ```
 */
export type Perk = {
    category: PerkCategories;
    maxLevel: number;
    getValue: ValueFormula;
    getDebuff: () => number;
    formatValue: (value: number, debuff: number) => string;
};
/**
 * @enum - StandardPerk - Enum of the Standard Perks
 */
export declare enum StandardPerk {
    MAX_HEALTH = "MAX_HEALTH",
    DAMAGE = "DAMAGE",
    HEALTH_REGEN = "HEALTH_REGEN",
    COIN_BONUSES = "COIN_BONUSES",
    BOUNCE_SHOT = "BOUNCE_SHOT",
    INTEREST = "INTEREST",
    LAND_MINE_DAMAGE = "LAND_MINE_DAMAGE",
    ORBS = "ORBS",
    FREE_UPGRADE_CHANCE = "FREE_UPGRADE_CHANCE",
    DEFENSE_PERCENT = "DEFENSE_PERCENT",
    PERK_WAVE_REQUIREMENT = "PERK_WAVE_REQUIREMENT",
    UNLOCK_ULTIMATE_WEAPON = "UNLOCK_ULTIMATE_WEAPON",
    INCREASE_GAME_SPEED = "INCREASE_GAME_SPEED"
}
/**
 * @enum - UltimatePerk - Enum of the Ultimate Perks
 */
export declare enum UltimatePerk {
    SMART_MISSILES = "Smart Missiles",
    POISON_SWAMP = "Poison Swamp",
    DEATH_WAVE = "Death Wave",
    GOLDEN_TOWER = "Golden Tower",
    CHAIN_LIGHTNING = "Chain Lightning",
    CHRONO_FIELD = "Chrono Field",
    INNER_LAND_MINES = "Inner Land Mines",
    BLACK_HOLE = "Black Hole",
    SPOTLIGHT = "Spotlight"
}
/**
 * @constant UltimateWeaponToEnum - Maps Ultimate Weapons to their matching Enum member
 */
export declare const UltimateWeaponToEnum: {
    [x: string]: UltimatePerk;
};
/**
 * @enum - TradeoffPerk - Enum of the Tradeoff perks
 */
export declare enum TradeoffPerk {
    DAMAGE_BOSS_HEALTH = "DAMAGE_BOSS_HEALTH",
    COINS_HEALTH = "COINS_HEALTH",
    HEALTH_REGEN_LIFESTEAL = "HEALTH_REGEN_LIFESTEAL",
    DAMAGE_DAMAGE = "DAMAGE_DAMAGE",
    RANGE_RANGE = "RANGE_RANGE",
    SPEED_DAMAGE = "SPEED_DAMAGE",
    CASH_WAVE_KILL = "CASH_WAVE_KILL",
    REGEN_HEALTH = "REGEN_HEALTH",
    BOSS_HEALTH_SPEED = "BOSS_HEALTH_SPEED",
    LIFESTEAL_KNOCKBACK = "LIFESTEAL_KNOCKBACK"
}
/**
 * @constant StandardPerks - A map of a value in the StandardPerk enum to the Perk Config for that perk
 */
export declare const StandardPerks: Readonly<{
    [key in StandardPerk]: Readonly<Perk>;
}>;
/**
 * @constant UltimatePerks - A map of the value in the UltimatePerk enum to the Perk config for that perk
 */
export declare const UltimatePerks: Readonly<{
    [key in UltimatePerk]: Readonly<Perk>;
}>;
/**
 * @constant TradeoffPerks - A map of the value in the TradeoffPerk enum to the Perk Config for that perk
 */
export declare const TradeoffPerks: Readonly<{
    [key in TradeoffPerk]: Readonly<Perk>;
}>;
/**
 * @constant Perks - A union map of all the Perk Enums to their Perk configs
 */
export declare const Perks: Readonly<{
    [key in StandardPerk | UltimatePerk | TradeoffPerk]: Readonly<Perk>;
}>;
