"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Perks = exports.TradeoffPerks = exports.UltimatePerks = exports.StandardPerks = exports.TradeoffPerk = exports.UltimateWeaponToEnum = exports.UltimatePerk = exports.StandardPerk = exports.PerkCategories = exports.TRADEOFF_PERK_CHANCE = exports.ULTIMATE_PERK_CHANCE = exports.STANDARD_PERK_CHANCE = void 0;
const formatValue_1 = require("../utils/formatValue");
const ultimateWeapons_1 = require("./ultimateWeapons");
/**
 * @constant STANDARD_PERK_CHANCE - Chance to pick a Standard Perk for a slot if there are still options left in all 3 categories.
 */
exports.STANDARD_PERK_CHANCE = 65;
/**
 * @constant ULTIMATE_PERK_CHANCE - Chance to pick a Ultimate Perk for a slot if there are still options left in all 3 categories
 */
exports.ULTIMATE_PERK_CHANCE = 20;
/**
 * @constant TRADEOFF_PERK_CHANCE - Chance to pick a Tradeoff Perk for a slot if there are still options left in all 3 categories.
 */
exports.TRADEOFF_PERK_CHANCE = 15;
/**
 * @enum - PerkCategories - Enum containing the categories of perks
 */
var PerkCategories;
(function (PerkCategories) {
    PerkCategories["STANDARD"] = "STANDARD";
    PerkCategories["ULTIMATE"] = "ULTIMATE";
    PerkCategories["TRADEOFF"] = "TRADEOFF";
})(PerkCategories || (exports.PerkCategories = PerkCategories = {}));
/**
 * @enum - StandardPerk - Enum of the Standard Perks
 */
var StandardPerk;
(function (StandardPerk) {
    StandardPerk["MAX_HEALTH"] = "MAX_HEALTH";
    StandardPerk["DAMAGE"] = "DAMAGE";
    StandardPerk["HEALTH_REGEN"] = "HEALTH_REGEN";
    StandardPerk["COIN_BONUSES"] = "COIN_BONUSES";
    StandardPerk["BOUNCE_SHOT"] = "BOUNCE_SHOT";
    StandardPerk["INTEREST"] = "INTEREST";
    StandardPerk["LAND_MINE_DAMAGE"] = "LAND_MINE_DAMAGE";
    StandardPerk["ORBS"] = "ORBS";
    StandardPerk["FREE_UPGRADE_CHANCE"] = "FREE_UPGRADE_CHANCE";
    StandardPerk["DEFENSE_PERCENT"] = "DEFENSE_PERCENT";
    StandardPerk["PERK_WAVE_REQUIREMENT"] = "PERK_WAVE_REQUIREMENT";
    StandardPerk["UNLOCK_ULTIMATE_WEAPON"] = "UNLOCK_ULTIMATE_WEAPON";
    StandardPerk["INCREASE_GAME_SPEED"] = "INCREASE_GAME_SPEED";
})(StandardPerk || (exports.StandardPerk = StandardPerk = {}));
/**
 * @enum - UltimatePerk - Enum of the Ultimate Perks
 */
var UltimatePerk;
(function (UltimatePerk) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["SMART_MISSILES"] = "Smart Missiles";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["POISON_SWAMP"] = "Poison Swamp";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["DEATH_WAVE"] = "Death Wave";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["GOLDEN_TOWER"] = "Golden Tower";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["CHAIN_LIGHTNING"] = "Chain Lightning";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["CHRONO_FIELD"] = "Chrono Field";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["INNER_LAND_MINES"] = "Inner Land Mines";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["BLACK_HOLE"] = "Black Hole";
    // eslint-disable-next-line @typescript-eslint/no-shadow
    UltimatePerk["SPOTLIGHT"] = "Spotlight";
})(UltimatePerk || (exports.UltimatePerk = UltimatePerk = {}));
/**
 * @constant UltimateWeaponToEnum - Maps Ultimate Weapons to their matching Enum member
 */
exports.UltimateWeaponToEnum = {
    [ultimateWeapons_1.SMART_MISSILES.name]: UltimatePerk.SMART_MISSILES,
    [ultimateWeapons_1.POISON_SWAMP.name]: UltimatePerk.POISON_SWAMP,
    [ultimateWeapons_1.DEATH_WAVE.name]: UltimatePerk.DEATH_WAVE,
    [ultimateWeapons_1.GOLDEN_TOWER.name]: UltimatePerk.GOLDEN_TOWER,
    [ultimateWeapons_1.CHAIN_LIGHTNING.name]: UltimatePerk.CHAIN_LIGHTNING,
    [ultimateWeapons_1.CHRONO_FIELD.name]: UltimatePerk.CHRONO_FIELD,
    [ultimateWeapons_1.INNER_LAND_MINES.name]: UltimatePerk.INNER_LAND_MINES,
    [ultimateWeapons_1.BLACK_HOLE.name]: UltimatePerk.BLACK_HOLE,
    [ultimateWeapons_1.SPOTLIGHT.name]: UltimatePerk.SPOTLIGHT,
};
/**
 * @enum - TradeoffPerk - Enum of the Tradeoff perks
 */
var TradeoffPerk;
(function (TradeoffPerk) {
    TradeoffPerk["DAMAGE_BOSS_HEALTH"] = "DAMAGE_BOSS_HEALTH";
    TradeoffPerk["COINS_HEALTH"] = "COINS_HEALTH";
    TradeoffPerk["HEALTH_REGEN_LIFESTEAL"] = "HEALTH_REGEN_LIFESTEAL";
    TradeoffPerk["DAMAGE_DAMAGE"] = "DAMAGE_DAMAGE";
    TradeoffPerk["RANGE_RANGE"] = "RANGE_RANGE";
    TradeoffPerk["SPEED_DAMAGE"] = "SPEED_DAMAGE";
    TradeoffPerk["CASH_WAVE_KILL"] = "CASH_WAVE_KILL";
    TradeoffPerk["REGEN_HEALTH"] = "REGEN_HEALTH";
    TradeoffPerk["BOSS_HEALTH_SPEED"] = "BOSS_HEALTH_SPEED";
    TradeoffPerk["LIFESTEAL_KNOCKBACK"] = "LIFESTEAL_KNOCKBACK";
})(TradeoffPerk || (exports.TradeoffPerk = TradeoffPerk = {}));
const multiplicativePerk = (base) => ({ count, standardPerkLabLevel }) => (1 + base * count) * (1 + standardPerkLabLevel / 100);
const additivePerk = (base) => ({ count, standardPerkLabLevel }) => base * count * (1 + standardPerkLabLevel / 100);
const noDebuff = () => 0;
/**
 * @constant StandardPerks - A map of a value in the StandardPerk enum to the Perk Config for that perk
 */
exports.StandardPerks = Object.freeze({
    [StandardPerk.MAX_HEALTH]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(0.2),
        getDebuff: noDebuff,
        formatValue: (value) => `Max Health x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.DAMAGE]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(0.15),
        getDebuff: noDebuff,
        formatValue: (value) => `Damage x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.HEALTH_REGEN]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(0.6),
        getDebuff: noDebuff,
        formatValue: (value) => `Health Regen x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.COIN_BONUSES]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(0.15),
        getDebuff: noDebuff,
        formatValue: (value) => `Coin Bonuses x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.BOUNCE_SHOT]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 3,
        getValue: ({ count }) => count,
        getDebuff: noDebuff,
        formatValue: (value) => `Bounce Shot +${value}`,
    }),
    [StandardPerk.INTEREST]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(0.5),
        getDebuff: noDebuff,
        formatValue: (value) => `Interest x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.LAND_MINE_DAMAGE]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: multiplicativePerk(2.5),
        getDebuff: noDebuff,
        formatValue: (value) => `Land Mine Damage x${(0, formatValue_1.roundHundredths)(value)}`,
    }),
    [StandardPerk.ORBS]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 2,
        getValue: ({ count }) => count,
        getDebuff: noDebuff,
        formatValue: (value) => `Orbs +${value}`,
    }),
    [StandardPerk.FREE_UPGRADE_CHANCE]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: additivePerk(5),
        getDebuff: noDebuff,
        formatValue: (value) => `Free upgrade chance for all +${(0, formatValue_1.roundHundredths)(value)}%`,
    }),
    [StandardPerk.DEFENSE_PERCENT]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 5,
        getValue: additivePerk(4),
        getDebuff: noDebuff,
        formatValue: (value) => `Defence percent +${(0, formatValue_1.roundHundredths)(value)}%`,
    }),
    [StandardPerk.PERK_WAVE_REQUIREMENT]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 3,
        getValue: additivePerk(20),
        getDebuff: noDebuff,
        formatValue: (value) => `Perk wave requirement -${(0, formatValue_1.roundHundredths)(value)}%`,
    }),
    [StandardPerk.UNLOCK_ULTIMATE_WEAPON]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 1,
        getValue: ({ count }) => count,
        getDebuff: noDebuff,
        formatValue: () => 'Unlock a random ultimate weapon',
    }),
    [StandardPerk.INCREASE_GAME_SPEED]: Object.freeze({
        category: PerkCategories.STANDARD,
        maxLevel: 1,
        getValue: additivePerk(1),
        getDebuff: noDebuff,
        formatValue: (value) => `Increase your game speed by ${(0, formatValue_1.roundHundredths)(value)}`,
    }),
});
/**
 * @constant UltimatePerks - A map of the value in the UltimatePerk enum to the Perk config for that perk
 */
exports.UltimatePerks = Object.freeze({
    [UltimatePerk.SMART_MISSILES]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 4,
        getDebuff: noDebuff,
        formatValue: () => '4 extra Smart missiles',
    }),
    [UltimatePerk.POISON_SWAMP]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1.5,
        getDebuff: noDebuff,
        formatValue: () => 'Swamp radius x1.5',
    }),
    [UltimatePerk.DEATH_WAVE]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1,
        getDebuff: noDebuff,
        formatValue: () => '+1 wave on death wave',
    }),
    [UltimatePerk.GOLDEN_TOWER]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1.5,
        getDebuff: noDebuff,
        formatValue: () => 'Golden tower bonus x1.5',
    }),
    [UltimatePerk.CHAIN_LIGHTNING]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 2,
        getDebuff: noDebuff,
        formatValue: () => 'Chain lightning damage x2',
    }),
    [UltimatePerk.CHRONO_FIELD]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1.5,
        getDebuff: noDebuff,
        formatValue: () => 'Chrono field radius x1.5',
    }),
    [UltimatePerk.INNER_LAND_MINES]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1,
        getDebuff: noDebuff,
        formatValue: () => 'Extra set of inner mines',
    }),
    [UltimatePerk.BLACK_HOLE]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 12,
        getDebuff: noDebuff,
        formatValue: () => 'Black hole duration +12s',
    }),
    [UltimatePerk.SPOTLIGHT]: Object.freeze({
        category: PerkCategories.ULTIMATE,
        maxLevel: 1,
        getValue: () => 1.5,
        getDebuff: noDebuff,
        formatValue: () => 'Spotlight Bonus x1.5',
    }),
});
const tradeoffBuff = (base) => ({ tradeoffPerkLabLevel }) => base * (1 + tradeoffPerkLabLevel / 100);
/**
 * @constant TradeoffPerks - A map of the value in the TradeoffPerk enum to the Perk Config for that perk
 */
exports.TradeoffPerks = Object.freeze({
    [TradeoffPerk.DAMAGE_BOSS_HEALTH]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(1.5),
        getDebuff: () => 8,
        formatValue: (value, debuff) => `${(0, formatValue_1.roundHundredths)(value)} tower damage, but bosses have x${(0, formatValue_1.roundHundredths)(debuff)} health`,
    }),
    [TradeoffPerk.COINS_HEALTH]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(1.8),
        getDebuff: () => 70,
        formatValue: (value, debuff) => `x${(0, formatValue_1.roundHundredths)(value)} coins, but tower max health - ${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
    [TradeoffPerk.HEALTH_REGEN_LIFESTEAL]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(50),
        getDebuff: () => 90,
        formatValue: (value, debuff) => `Enemies have -${(0, formatValue_1.roundHundredths)(value)}% health, but tower health regen and lifesteal -${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
    [TradeoffPerk.DAMAGE_DAMAGE]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(50),
        getDebuff: () => 50,
        formatValue: (value, debuff) => `Enemies damage -${(0, formatValue_1.roundHundredths)(value)}%, but tower damage -${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
    [TradeoffPerk.RANGE_RANGE]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: () => 10,
        getDebuff: () => 3,
        formatValue: (value, debuff) => `Ranged enemies attack distance reduced, but ranged enemies damage x${(0, formatValue_1.roundHundredths)(debuff)}`,
    }),
    [TradeoffPerk.SPEED_DAMAGE]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(50),
        getDebuff: () => 2.5,
        formatValue: (value, debuff) => `Enemies speed -${(0, formatValue_1.roundHundredths)(value)}%, but enemies damage x${(0, formatValue_1.roundHundredths)(debuff)}`,
    }),
    [TradeoffPerk.CASH_WAVE_KILL]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: () => 12,
        getDebuff: () => 100,
        formatValue: (value) => `x${value} cash per wave, but enemy kills don't give cash`,
    }),
    [TradeoffPerk.REGEN_HEALTH]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(8),
        getDebuff: () => 60,
        formatValue: (value, debuff) => `Tower health regen x${(0, formatValue_1.roundHundredths)(value)}, but tower max health -${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
    [TradeoffPerk.BOSS_HEALTH_SPEED]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: ({ tradeoffPerkLabLevel }) => 70 + (1 + tradeoffPerkLabLevel / 200),
        getDebuff: () => 50,
        formatValue: (value, debuff) => `Boss health -${(0, formatValue_1.roundHundredths)(value)}%, but boss speed +${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
    [TradeoffPerk.LIFESTEAL_KNOCKBACK]: Object.freeze({
        category: PerkCategories.TRADEOFF,
        maxLevel: 1,
        getValue: tradeoffBuff(2.5),
        getDebuff: () => 70,
        formatValue: (value, debuff) => `Lifesteal x${(0, formatValue_1.roundHundredths)(value)}, but knockback force -${(0, formatValue_1.roundHundredths)(debuff)}%`,
    }),
});
/**
 * @constant Perks - A union map of all the Perk Enums to their Perk configs
 */
exports.Perks = Object.freeze({
    ...exports.StandardPerks,
    ...exports.UltimatePerks,
    ...exports.TradeoffPerks,
});
