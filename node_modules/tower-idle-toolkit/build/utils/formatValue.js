"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatValue = exports.NUMBER_UNITS = exports.roundThousandths = exports.roundHundredths = exports.roundTenths = exports.round = void 0;
/**
 * @function round - rounds a number to a specified number of places
 * @param value - any number
 * @param places - number of places to round to (0-20 inclusive)
 * @returns string - the value rounded to the nearest hundredths place
 */
const round = (value, places) => (Math.round(value * 10 ** places) / 10 ** places).toFixed(places);
exports.round = round;
/**
 * @function roundTenths - rounds a number to the tenths place
 * @param value - number to round
 * @returns string - the value rounded to the tenths place
 */
const roundTenths = (value) => (0, exports.round)(value, 1);
exports.roundTenths = roundTenths;
/**
 * @function roundHundredths - rounds a number to the hundredths place
 * @param value - number to round
 * @returns string - the value rounded to the hundredths place
 */
const roundHundredths = (value) => (0, exports.round)(value, 2);
exports.roundHundredths = roundHundredths;
/**
 * @function roundThousandths - rounds a number to the thousandths place
 * @param value - number to round
 * @returns string - the value rounded to the thousandths place
 */
const roundThousandths = (value) => (0, exports.round)(value, 2);
exports.roundThousandths = roundThousandths;
/**
 * @constant NUMBER_UNITS - All the units currently supported
 */
exports.NUMBER_UNITS = [
    'K',
    'M',
    'B',
    'T',
    'q',
    'Q',
    's',
    'S',
    'O',
    'N',
    'D',
    'ab',
    'ac',
    'ad',
    'ae',
    'af',
    'ag',
    'ah',
    'ai',
    'aj',
    'ak',
    'al',
    'am',
    'an',
    'ao',
    'ap',
    'aq',
    'ar',
    'as',
    'at',
    'au',
    'av',
    'aw',
    'ax',
    'ay',
    'az',
];
/**
 * @name formatValue
 * format any raw value to get the nice display shown in game
 *
 * @param value - any raw number
 * @returns - the string value shown in game. Units up through `az` are supported; `aa` starts after `D`. After `az` it is displayed as an exponential with 2 digits.
 */
const formatValue = (value) => {
    if (value < 1_000)
        return value.toFixed(0);
    let workingValue = value;
    for (let i = 0; i <= exports.NUMBER_UNITS.length; i += 1) {
        const unit = exports.NUMBER_UNITS[i];
        workingValue /= 1_000;
        if (workingValue < 1_000)
            return `${(0, exports.roundHundredths)(workingValue)}${unit}`;
    }
    return value.toExponential(2);
};
exports.formatValue = formatValue;
