/**
 * @function getRealGameSpeed - Return the actual speed multiplier from a displayed game speed, because the number in the UI is not the actual multiplier
 *
 * @param displayedGameSpeed - number - the game speed displayed in the ui.
 * @param introSprint - boolean - if the intro sprint card is currently active
 * @returns number - the actual game speed multiplier to use for math
 */
export declare const getRealGameSpeed: (displayedGameSpeed: number, introSprint?: boolean) => number;
/**
 * @constant WAVE_DURATION - How long the base wave time is where enemies spawn, excluding the cooldown, before applying game speed - note that Device Frame Drift may extend this slightly.
 */
export declare const WAVE_DURATION = 26;
/**
 * @constant NORMAL_WAVE_COOLDOWN - The base length for the cooldown (green bar) between waves lasts on non-boss waves, outside of tournaments, and without Wave Accelerator, before applying game speed - note that Device Frame Drift may extend this slightly.
 */
export declare const NORMAL_WAVE_COOLDOWN = 9;
/**
 * @constant BOSS_WAVE_COOLDOWN - The base length for the cooldown (green bar) between waves lasts on boss waves, outside of tournaments, and without Wave Accelerator, before applying game speed - note that Device Frame Drift may extend this slightly.
 */
export declare const BOSS_WAVE_COOLDOWN = 12;
/**
 * @constant TOURNAMENT_COOLDOWN_MODIFIER - The multiplier reduction on the Cooldown (green bar) between waves in tournaments
 */
export declare const TOURNAMENT_COOLDOWN_MODIFIER = 0.5;
/**
 * @function isBossWave - If the specified wave is a boss wave
 *
 * @param wave - number - The wave number
 * @returns boolean - If it is a boss wave
 */
export declare const isBossWave: (wave: number) => boolean;
/**
 * @function getWaveCooldown - Get the cooldown for the wave, without game speed applied, and without accounting for Device Frame Drift
 *
 * @param wave - number - The wave for which to get the cooldown
 * @param waveAccelerator - number - The level of the Wave Accelerator card (0 for unequipped, 1-7 for card stars; invalid values will be treated as 0
 * @param tournament - boolean - If a tournament is active, speed up the cooldown by the tournament modifier
 * @returns number - The cooldown time, before game speed is applied, and without accounting for Device Frame Drift
 */
export declare const getWaveCooldown: (wave: number, waveAccelerator: number, tournament: boolean) => number;
/**
 * @function getInGameWaveTime - Get the "Game" time the wave takes
 *
 * @param wave - number - The wave for which to get the time
 * @param waveAccelerator - number - The stars of the Wave Accelerator card, 0 for unequipped
 * @param tournament - boolean - If a tournament is active, it speeds up the cooldown portion
 * @returns number - The number of "in game seconds" the wave lasts for.
 */
export declare const getInGameWaveTime: (wave: number, waveAccelerator: number, tournament: boolean) => number;
/**
 * @function getRealWaveTime - Get the real world time a wave takes, accounting for game speed, but not accounting for Device Frame Drift.
 *
 * Takes an object with the params:
 * - `wave` - number - The wave
 * - `displayedGameSpeed` - number - The displayed game speed - use the value in game. For perks, you can use the "actual" value pre-rounding (6.25 with 1.25 perk bonus)
 * - `introSprint` - boolean - If the intro sprint card is active
 * - `waveAccelerator` - number - The stars of the Wave Accelerator card (0-7, 0 is unequipped)
 * - `tournament` - boolean - If it is a tournament, speed up the cooldown.
 * @returns number - The actual seconds the wave took, not accounting for Device Frame Drift.
 */
export declare const getRealWaveTime: ({ wave, displayedGameSpeed, introSprint, waveAccelerator, tournament, }: {
    wave: number;
    displayedGameSpeed: number;
    introSprint: boolean;
    waveAccelerator: number;
    tournament: boolean;
}) => number;
